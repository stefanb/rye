

section "Working with blocks and lists"
"Functions that mostly work with collections (blocks / lists)."
{	
	
	group "range"
	mold\nowrap ?range
	{ { integer } { integer } }
	{
		equal { range 1 5 } { 1 2 3 4 5 }
	}
	
	group "first"
	mold\nowrap ?first
	{ { block } }
	{
		equal { first { 1 2 3 4 5 } } 1
		equal { first list { 1 2 3 4 5 } } 1
		equal { first "12345" } "1"
		equal { try { first { } } |type? } 'error
		equal { try { first list { } } |type? } 'error
		equal { try { first "" } |type? } 'error
		equal { try { first table { "Name" } [ ] } |type? } 'error
	}

	group "rest"
	mold\nowrap ?rest
	{ { block } }
	{
		equal { rest { 1 2 3 4 5 } } { 2 3 4 5 }
		equal { rest list { 1 2 3 4 5 } } list { 2 3 4 5 }
		equal { rest "12345" } "2345"
		equal { try { rest { } } |type? } 'error
		equal { try { rest list { } } |type? } 'error
		equal { try { rest "" } |type? } 'error
	}

	group "rest\from"
	mold\nowrap ?rest\from
	{ { block } { integer } }
	{
		equal { rest\from { 1 2 3 4 5 } 2 } { 3 4 5 }
		equal { rest\from list { 1 2 3 4 5 } 2 } list { 3 4 5 }
		equal { rest\from "12345" 2 } "345"
		equal { try { rest\from { } } |type? } 'error
		equal { try { rest\from list { } } |type? } 'error
		equal { try { rest\from "" } |type? } 'error
	}

	group "second"
	mold\nowrap ?second
	{ { block } }
	{
		equal { second { 1 2 3 4 5 } } 2
		equal { second list { 1 2 3 4 5 } } 2
		equal { second "12345" } "2"
		equal { try { second { } } |type? } 'error
		equal { try { second list { } } |type? } 'error
		equal { try { second "" } |type? } 'error
	}

	group "third"
	mold\nowrap ?third
	{ { block } }
	{
		equal { third { 1 2 3 4 5 } } 3
		equal { third list { 1 2 3 4 5 } } 3
		equal { third "12345" } "3"
		equal { try { third { } } |type? } 'error
		equal { try { third list { } } |type? } 'error
		equal { try { third "" } |type? } 'error
	}

	group "nth"
	mold\nowrap ?nth
	{ { block } }
	{
		equal { nth { 1 2 3 4 5 } 4 } 4
		equal { nth list { 1 2 3 4 5 } 4 } 4
		equal { nth "12345" 4 } "4"
		equal { try { nth { } } |type? } 'error
		equal { try { nth list { } } |type? } 'error
		equal { try { nth "" } |type? } 'error
	}

	group "->"
	mold\nowrap "?_->"
	{ { string  } }
	{
		equal { { 11 22 33 } -> 1 } 22
		equal { list { 11 22 33 } -> 1 } 22
		equal { dict { "a" 11 "b" 22 "c" 33 } -> "b" } 22
	}

	group "<-"
	mold\nowrap "?_<-"
	{ { string  } }
	{
		equal { 2 <- { 11 22 33 } } 33
		equal { 2 <- list { 11 22 33 } } 33
		equal { "c" <- dict { "a" 11 "b" 22 "c" 33 } } 33
	}

	
	group "last"
	mold\nowrap ?last
	{ { block } }
	{
		equal { last { 1 2 3 4 5 } } 5
		equal { last list { 1 2 3 4 5 } } 5
		equal { last "12345" } "5"
		equal { try { last { } } |type? } 'error
		equal { try { last list { } } |type? } 'error
		equal { try { last "" } |type? } 'error
	}
	
	group "head"
	mold\nowrap ?head
	{ { block } { integer } }
	{
		equal { head { 1 2 3 4 5 } 2 } { 1 2 }
		equal { head { 1 2 3 4 5 } 10 } { 1 2 3 4 5 }
		equal { head { } 2 } { }
		equal { head list { 1 2 3 4 5 } 2 } list { 1 2 }
		equal { head list { 1 2 3 4 5 } 10 } list { 1 2 3 4 5 }
		equal { head list { } 2 } list { }
		equal { head "12345" 2 } "12"
		equal { head "12345" 10 } "12345"
		equal { head "" 2 } ""
	}

	
	group "tail"
	mold\nowrap ?tail
	{ { block } { integer } }
	{
		equal { tail { 1 2 3 4 5 } 2 } { 4 5 }
		equal { tail { 1 2 3 4 5 } 10 } { 1 2 3 4 5 }
		equal { tail {  } 2 } { }
		equal { tail list { 1 2 3 4 5 } 2 } list { 4 5 }
		equal { tail list { 1 2 3 4 5 } 10 } list { 1 2 3 4 5 }
		equal { tail list {  } 2 } list { }
		equal { tail "12345" 2 } "45"
		equal { tail "12345" 10 } "12345"
		equal { tail "" 2 } ""
	}

	group "length?"
	mold\nowrap ?length?
	{ { block string list } }
	{
		equal { length? "1234567" } 7
		equal { { 1 2 3 4 5 } .length? } 5
		equal { list { 1 2 3 } |length? } 3
	}
	
	group "list"
	mold\nowrap ?list
	{ { block } }
	{
		equal { list { "a" 1 "b" 2 } |type? } 'list
	}

  	group "dict"
	mold\nowrap ?dict
	{ { block } }
	{
		equal { dict { "a" 1 "b" 2 } |type? } 'dict
	}

  	group "min"
	mold\nowrap ?dict
	{ { block } }
	{
		equal { min { 8 2 10 6 } } 2
		equal { min list { 8 2 10 6 } } 2
		equal { try { min { } } |type? } 'error
		equal { try { min list { } } |type? } 'error
	}
  	group "max"
	mold\nowrap ?dict
	{ { block } }
	{
		equal { max { 8 2 10 6 } } 10
		equal { max list { 8 2 10 6 } } 10
		equal { try { max { } } |type? } 'error
		equal { try { max list { } } |type? } 'error
	}
  	group "avg"
	mold\nowrap ?dict
	{ { block } }
	{
		equal { avg { 8 2 10 6 } } 6.5
		equal { avg list { 8 2 10 6 } } 6.5
		equal { try { avg { } } |type? } 'error
		equal { try { avg list { } } |type? } 'error
	}
  	group "sum"
	mold\nowrap ?sum
	{ { block } }
	{
		equal { sum { 8 2 10 6 } } 26
		equal { sum { 8 2 10 6.5 } } 26.5
		equal { sum { } } 0
		equal { sum list { 8 2 10 6 } } 26
		equal { sum list { 8 2 10 6.5 } } 26.5
		equal { sum list { } } 0
	}
  	group "union"
	mold\nowrap ?union
	{ { block } }
	; sortorder isn't deterministic so far ... think if it should be
	{
		equal { union { 8 2 } { 1 9 } |sort! } { 1 2 8 9 } 
		equal { union { 1 2 } { } |sort! } { 1 2 }
		equal { union { } { 1 9 } |sort! }  { 1 9 }
		equal { union { } { } } { }

		equal { union list { 1 2 } list { 1 2 3 4 } |sort! } list { 1 2 3 4 }
		equal { union list { 1 2 } list { 1 } |sort! } list { 1 2 }
		equal { union list { 1 2 } list { } |sort! } list { 1 2 }
		equal { union list { } list { 1 2 } |sort! } list { 1 2 }
		equal { union list { } list { } } list { }
	}
  	group "intersection"
	mold\nowrap ?intersection
	{ { block } }
	{
		equal { intersection { 1 3 5 6 } { 2 3 4 5 } } { 3 5 }
		equal { intersection { 1 2 3 } { } } {  }
		equal { intersection { } { 2 3 4  } } { }
		equal { intersection { 1 2 3 } { 4 5 6 } } { }
		equal { intersection { } { } } { }

		equal { intersection list { 1 3 5 6 } list { 2 3 4 5 } } list { 3 5 }
		equal { intersection list { 1 2 3 } list { } } list {  }
		equal { intersection list { } list { 2 3 4 } } list { }
		equal { intersection list { 1 2 3 } list { 4 5 6 } } list { }
		equal { intersection list { } list { } } list { }
	}
	group "difference"
	mold\nowrap ?difference
	{ { block } }
	{
		equal { difference "abc" "bc" } "a"
		equal { difference "abc" "abc" } ""
		equal { difference "abc" "" } "abc"
		equal { difference "" "" } ""

		equal { difference { 1 3 5 6 } { 2 3 4 5 } } { 1 6 }
		equal { difference { 1 2 3 } {  } } { 1 2 3 }
		equal { difference { } { 2 3 4  } } { }
		equal { difference { } { } } { }

		equal { difference list { 1 3 5 6 } list { 2 3 4 5 } } list { 1 6 }
		equal { difference list { 1 2 3 } list {  } } list { 1 2 3 }
		equal { difference list { } list { 2 3 4 } } list { }
		equal { difference list { } list { } } list { }
	}

	group "unique"
	mold\nowrap ?unique
	{ { block string list } }
	; result order is not deterministic
	{
		equal { list { 3 2 3 5 3 2 } .unique |sort! } list { 2 3 5 }
		; List
		equal { unique list { 1 1 2 2 3 } |sort! } list { 1 2 3 }
		equal { unique list { 1 1 2 2 } |sort! } list { 1 2 }

		; Block
		equal { unique { 1 1 2 2 3 } |sort! } { 1 2 3 }
		equal { unique { 1 1 2 2 } |sort! } { 1 2 }

		; String
		equal { unique "aabbc" |length? } 3
		equal { unique "ab" |length? } 2
	}
}


` section "Context functions"
"Functions that mostly work with blocks."
{
	group "doc"
	mold\nowrap ?doc
	{ { string  } }
	{
		; TODO
	}

	group "doc?"
	mold\nowrap ?doc?
	{ { } }
	{
		; TODO
	}

} `





section "Higher order like functions"
"Functions for usual HOF patterns, map, reduce, filter."
{	

	group "map"
	mold\nowrap ?map
	{ { block } { block } }
	{
		equal { map { 1 2 3 } { + 1 } } { 2 3 4 }
		equal { map { } { + 1 } } { }
		equal { map { "aaa" "bb" "c" } { .length? } } { 3 2 1 }
		equal { map list { "aaa" "bb" "c" } { .length? } } list { 3 2 1 }
		equal { map list { 3 4 5 6 } { .multiple-of 3 } } list { 1 0 0 1 }
		equal { map list { } { + 1 } } list { }
		; equal { map "abc" { + "-" } .join } "a-b-c-" ; TODO doesn't work, fix join
		equal { map "123" { .to-integer } } { 1 2 3 }
		equal { map "123" ?to-integer } { 1 2 3 }
		equal { map "" { + "-" } } { }
	}	
	group "map\pos"
	mold\nowrap ?map\pos
	{ { block } { block } }
	{
		equal { map\pos { 1 2 3 } 'i { + i } } { 2 4 6 }
		equal { map\pos { } 'i { + i } } { }
		equal { map\pos list { 1 2 3 } 'i { + i } } list { 2 4 6 }
		equal { map\pos list { } 'i { + i } } list { }
		equal { map\pos "abc" 'i { + i } } { "a1" "b2" "c3" }
		equal { map\pos "" 'i { + i } } { }
	}	
	group "filter"
	mold\nowrap ?filter
	{ { block } { block } }
	{
		equal { filter { 1 2 3 4 } { .even } } { 2 4 }
		equal { filter { 1 2 3 4 } ?even } { 2 4 }
		equal { filter { } { .even } } { }
		equal { filter list { 1 2 3 4 } { .even } } list { 2 4 }
		equal { filter list { 1 2 3 4 } ?even } list { 2 4 }
		equal { filter list { } { .even } } list { }
		equal { filter "1234" { .to-integer .even } } { "2" "4" }
		equal { filter "01234" ?to-integer } { "1" "2" "3" "4" }
		equal { filter "" { .to-integer .even } } { }

	}	
	group "seek"
	mold\nowrap ?seek
	{ { block } { block } }
	{
		equal { seek { 1 2 3 4 } { .even } } 2	
		equal { seek list { 1 2 3 4 } { .even } } 2
		equal { seek "1234" { .to-integer .even } } "2"
		equal { try { seek { 1 2 3 4 } { > 5 } } |type? } 'error
		equal { try { seek list { 1 2 3 4 } { > 5 } } |type? } 'error
		equal { try { seek "1234" { .to-integer > 5 } } |type? } 'error
	}	
	group "purge"
	mold\nowrap ?purge
	{ { block } { block } }
	{
		equal { purge { 1 2 3 } { .even } } { 1 3 }
		equal { purge { } { .even } } { }
		equal { purge list { 1 2 3 } { .even } } list { 1 3 }
		equal { purge list { } { .even } } list { }
		equal { purge "1234" { .to-integer .even } } { "1" "3" }
		equal { purge "" { .to-integer .even } } { }
	}	
	group "reduce"
	mold\nowrap ?reduce
	{ { block } { block } }
	{
		equal { reduce { 1 2 3 } 'acc { + acc } } 6
		equal { reduce list { 1 2 3 } 'acc { + acc } } 6
		equal { reduce "abc" 'acc { + acc } } "cba"
		equal { try { reduce { } 'acc { + acc } } |type? } 'error
		equal { try { reduce list { } 'acc { + acc } } |type? } 'error
		equal { try { reduce "" 'acc { + acc } } |type? } 'error
	}	
	group "fold"
	mold\nowrap ?fold
	{ { block } { block } }
	{
		equal { fold { 1 2 3 } 'acc 1 { + acc } } 7
		equal { fold { } 'acc 1 { + acc } } 1
		equal { fold list { 1 2 3 } 'acc 1 { + acc } } 7
		equal { fold list { } 'acc 1 { + acc } } 1
		equal { fold "abc" 'acc "123" { + acc } } "cba123"
		equal { fold "" 'acc "123" { + acc } } "123"
	}	
	group "partition"
	mold\nowrap ?partition
	{ { block } { block } }
	{
		equal { partition { 1 2 3 4 } { > 2 } } { { 1 2 } { 3 4 } }
		equal { partition { "a" "b" 1 "c" "d" } { .is-integer } } { { "a" "b" } { 1 } { "c" "d" } }
		equal { partition { "a" "b" 1 "c" "d" } ?is-integer } { { "a" "b" } { 1 } { "c" "d" } }
		equal { partition { } { > 2 } } { { } }
		equal { partition list { 1 2 3 4 } { > 2 } } list vals { list { 1 2 } list { 3 4 } }
		equal { partition list { "a" "b" 1 "c" "d" } ?is-integer } list vals { list { "a" "b" } list { 1 } list { "c" "d" } }
		equal { partition list { } { > 2 } } list vals { list { } }
		equal { partition "aaabbccc" { , } } list { "aaa" "bb" "ccc" }
		equal { partition "" { , } } list { "" }
		equal { partition "aaabbccc" ?is-string } list { "aaabbccc" }
	}	
	group "group"
	mold\nowrap ?group
	{ { block } { block } }
	; TODO-FIX these tests sometimes fail although the printed results look identical, could be something in the comparison function (dict key ordering maybe?)
	{
		; Equality for dicts doesn't yet work consistently
		;equal { { "Anne" "Mitch" "Anya" } .group { .first } } dict vals { "A" list { "Anne" "Anya" } "M" list { "Mitch" } }
		;equal { { "Anne" "Mitch" "Anya" } .group ?first } dict vals { "A" list { "Anne" "Anya" } "M" list { "Mitch" } }
		;equal { { } .group { .first } } dict vals { }
		;equal { { "Anne" "Mitch" "Anya" } .list .group { .first } } dict vals { "A" list { "Anne" "Anya" } "M" list { "Mitch" } }
		;equal { { "Anne" "Mitch" "Anya" } .list .group ?first } dict vals { "A" list { "Anne" "Anya" } "M" list { "Mitch" } }
		equal { { } .list .group { .first } } dict vals { }
		equal { try { { 1 2 3 4 } .group { .even } } |type? } 'error ; TODO keys can only be string currently
	}	
	group "produce"
	mold\nowrap ?produce
	{ { block } { block } }
	{
		equal { produce 5 0 { + 3 } } 15
	}	
	group "sum-up"
	mold\nowrap ?sum-up
	{ { block } { block } }
	{
		equal { sum-up { 1 2 3 } { * 10 } } 60
		equal { sum-up { 1 2 3 } { * 2.5 } } 15.0
		equal { sum-up { 1 2.5 3.5 } { * 10 } } 70.0
		equal { sum-up { "1" "2" "3" } ?to-integer } 6
		equal { sum-up { } { * 10 } } 0
		equal { sum-up list { 1 2 3 } { * 10 } } 60
		equal { sum-up list { 1 2.5 3.5 } { * 10 } } 70.0
		equal { sum-up list { "1" "2" "3" } ?to-integer } 6
		equal { sum-up list { } { * 10 } } 0
	}	
}

section "Context related functions"
"Functions for handling and working with Context."
{	
	
	group "current-ctx"
	mold\nowrap ?current-ctx
	{ }
	{
		equal { current-ctx |type? } 'ctx ; TODO should probably rename to context 
	}	

	group "parent"
	mold\nowrap ?parent
	{ }
	{
		equal { cc:: context { f: does { parent |type? } } , cc/f } 'ctx
	}	

	; TODO -- make something that clears color formatting or solve it some other way
	;	group "ls"
	;	mold\nowrap ?ls
	;	{ }
	;	{
	;		example { cc: context { x: 123 , ls } } 'ctx
	;	}	

	group "context"
	mold\nowrap ?context
	{ { block } }
	{
		equal { context { x: does { 1 + 1 } } ::cc , cc/x } 2
	}	

	group "isolate"
	mold\nowrap ?isolate
	{ { block } }
	{
		equal { isolate { x: does { t { 1 + 1 } } t: ?try } ::cc , cc/x |type? } 'error
	}	

	group "raw-context"
	mold\nowrap ?raw-context
	{ { block } }
	{
		equal { cc:: raw-context { name: "Jim" } |type? } 'ctx
	}	

	group "private"
	mold\nowrap ?private
	{ { block } }
	{
		equal { private { x: 3 , x + 30 } ::x } 33 
	}	

	group "extends"
	mold\nowrap ?extends
	{ { block } }
	{
		equal { c1: context { x: 1 } , c2: extends c1 { y: 2 } , c2/x } 1
	}	

	group "bind!"
	mold\nowrap ?bind!
	{ { block } }
	{
		equal { isolate { x: does { 1 + 1 } } |bind! current ::cc , cc/x } 2
	}	

	group "unbind!"
	mold\nowrap ?unbind!
	{ { block } }
	{
		equal { context { x: does { t { 1 + 1 } } t: ?try } |unbind! ::cc , cc/x |type? } 'error
	}	

}


section "Serializers and loaders"
"Functions that print values to stdio"
{
	group "mold"
	mold\nowrap ?mold
	{ { function } }
	{
		equal { mold 33 } "33"
	}
	group "mold\unwrap"
	mold\nowrap ?mold\nowrap
	{ { function } }
	{
		equal { mold\nowrap "33" } `33` ; TODO --- unify this ... just changed probe to not have quotes
	}
	group "capture-stdout"
	mold\nowrap ?capture-stdout
	{ { block } }
	{
		equal { capture-stdout { "out" .print , "not this" } } "out" + newline
	}

	group "dump"
	mold\nowrap ?dump
	{ { any } { word } }
	{
		equal { fn { x } { x + 1 } |dump } "fn { x } { x ._+ 1 }"
	}

	group "doc\of?"
	mold\nowrap ?doc\of?
	{ { function } }
	{
		equal { fn { x "docstring" } { x + 1 } |doc\of? } "docstring"
	}

	group "load"
	mold\nowrap ?load
	{ { block } }
	{
		equal { load "1 2 3" |type? } 'block
		equal { load "1 2 3" |length? } 3
		equal { load "1 2 { print 4 }" |third |length? } 2
		equal { load "1 2 { print 4 }" |third |first |type? } 'word
	}

	group "load\csv"
	mold\nowrap ?load\csv
	{ { block } }
	{
		equal { try { load\csv file:///dev/null } |type? } 'error
	}

}



section "Table related functions"
"Functions for creating and working with tables."
{	
	
	group "table & related"
	mold\nowrap ?table
	{ }
	{
		equal { table\columns { "name" "rating" "weight" }
			{ { "Enno" "Enya" "Shizuuchi" "Kunishima" }
			  { 4.3    6       7.2          2 }
			  { 120    132     168         68 }
			 } ::spr |type? } 'table
		equal { spr |length? } 4
		equal { spr |header? |length? } 3
		equal\todo { spr -> 2 -> 'name } "Enya"
		equal { spr .first -> "name" } "Enno"
		equal { spr .where-equal 'name "Enya" |length? } 1
		equal { spr .where-contains 'name "En" |length? } 2
		equal { spr .where-match 'name regexp "En.." |length? } 2
		equal { spr .where-greater 'weight 140 |length? } 1
		equal { spr .where-lesser 'weight 130 |length? } 2
		equal { spr .where-between 'weight 130 170 |length? } 2
	}

	group "autotype"
	mold\nowrap ?to-table
	{ { block } }
	{
		equal { table { "a" "b" } { "aa" "2" "bb" "4" } |autotype 1.0     }  table { "a" "b" } { "aa" 2   "bb" 4 }
		equal { table { "a" "b" } { "aa" "2.1" "bb" "4.3" } |autotype 1.0 }  table { "a" "b" } { "aa" 2.1 "bb" 4.3 }
		equal { table { "a" "b" } { "aa" 2.1 "bb" "4.3" } |autotype 1.0 }  table { "a" "b" } { "aa" 2.1 "bb" 4.3 }
		equal { table { "a" "b" } { "aa" "2" "bb" 4 } |autotype 1.0 }  table { "a" "b" } { "aa" 2 "bb" 4 }
	}
	
	group "to-table"
	mold\nowrap ?to-table
	{ { block } }
	{
		equal { to-table vals { dict { "a" 1 b 2 } dict { "a" 3 "b" 4 } } } table { "a" "b" } { 1 2 3 4 }
		equal { to-table vals { dict { "a" 1 b 2 "c" 3 } dict { "a" 4 "b" 5 } } } table { "a" "b" "c" } { 1 2 3 4 5 _ }
	}

	group "add-column"
	mold\nowrap ?add-column!
	{ { block } }
	{
		equal { try { table { "n" } [ 1 ] |add-col! 'm { x } { x } } |type? } 'error
	}

	group "index"
	mold\nowrap ?add-indexes!
	{ { block } }
	{
		; returned value
		equal { spr:: table { "a" "b" } { 1 2 3 4 } |add-indexes! [ 'a ] |indexes? } { "a" }
		; in-place
		; TODO this should work but doesn't, index should be added in place but for some reason it isn't
		; equal { spr: table { "a" "b" } { 1 2 3 4 } , spr .add-indexes! [ 'a ] , spr .indexes? } { "a" }
	}

	group "left join"
	mold\nowrap ?left-join
	{ { block } }
	{
		equal { names:: table { "id" "name" } { 1 "Paul" 2 "Chani" 3 "Vladimir" } ,
				houses:: table { "id" "house" } { 1 "Atreides" 3 "Harkonnen" 4 "Corrino" } ,
				names .left-join houses 'id 'id 
		} table { "id" "name" "id_2" "house" } { 1 "Paul" 1 "Atreides" 2 "Chani" _ _ 3 "Vladimir" 3 "Harkonnen" }
		
		; joining with an index on the second table
		equal { names:: table { "id" "name" } { 1 "Paul" 2 "Chani" 3 "Vladimir" } , 
				houses:: table { "id" "house" } { 1 "Atreides" 3 "Harkonnen" } ,
				houses .add-indexes! [ 'id ] ::houses ,
				names .left-join houses 'id 'id 
		} table { "id" "name" "id_2" "house" } { 1 "Paul" 1 "Atreides" 2 "Chani" _ _ 3 "Vladimir" 3 "Harkonnen" }

		equal {	a:: table { "a" "b" } { 1 "one" 2 "two" } ,
				c:: table { "a" "c" } { 1 "ena" 1 "eden" 1 "eno" } ,
				a .left-join c "a" "a"
		} table { "a" "b" "a_2" "c" } { 1 "one" 1 "ena" 1 "one" 1 "eden" 1 "one" 1 "eno" 2 "two" _ _ } 

		; joining with an index on the second table
		equal {	a:: table { "a" "b" } { 1 "one" 2 "two" } ,
				c:: table { "a" "c" } { 1 "ena" 1 "eden" 1 "eno" } ,
				c .add-indexes! [ 'a ] ::c ,
				a .left-join c "a" "a"
		} table { "a" "b" "a_2" "c" } { 1 "one" 1 "ena" 1 "one" 1 "eden" 1 "one" 1 "eno" 2 "two" _ _ } 
	}

	group "inner join"
	mold\nowrap ?inner-join
	{ { block } }
	{
		equal { names:: table { "id" "name" } { 1 "Paul" 2 "Chani" 3 "Vladimir" } ,
				houses:: table { "id" "house" } { 1 "Atreides" 3 "Harkonnen" 4 "Corrino" } ,
				names .inner-join houses 'id 'id 
		} table { "id" "name" "id_2" "house" } { 1 "Paul" 1 "Atreides" 3 "Vladimir" 3 "Harkonnen" }
		
		; joining with an index on the second table
		equal { names:: table { "id" "name" } { 1 "Paul" 2 "Chani" 3 "Vladimir" } , 
				houses:: table { "id" "house" } { 1 "Atreides" 3 "Harkonnen" } ,
				houses .add-indexes! [ 'id ] ::houses ,
				names .inner-join houses 'id 'id 
		} table { "id" "name" "id_2" "house" } { 1 "Paul" 1 "Atreides" 3 "Vladimir" 3 "Harkonnen" }


		equal {	a:: table { "a" "b" } { 1 "one" 2 "two" } ,
				c:: table { "a" "c" } { 1 "ena" 1 "eden" 1 "eno" } ,
				a .inner-join c "a" "a"
		} table { "a" "b" "a_2" "c" } { 1 "one" 1 "ena" 1 "one" 1 "eden" 1 "one" 1 "eno" } 

		; joining with an index on the second table
		equal {	a:: table { "a" "b" } { 1 "one" 2 "two" } ,
				c:: table { "a" "c" } { 1 "ena" 1 "eden" 1 "eno" } ,
				c .add-indexes! [ 'a ] ::c ,
				a .inner-join c "a" "a"
		} table { "a" "b" "a_2" "c" } { 1 "one" 1 "ena" 1 "one" 1 "eden" 1 "one" 1 "eno" } 

	}

	group "group by"
	mold\nowrap ?group-by
	{ { block } }
	{
		equal { table { "name" "val" } { "a" 1 "b" 2 } |group-by 'name { } |order-by! 'name 'asc
		} table { "name" } { "a" "b" }

		equal { table { "name" "val" } { "a" 1 "b" 6 "a" 5 "b" 10 "a" 7 } 
				|group-by 'name { 'name count 'val sum 'val min 'val max 'val avg } 
				|order-by! 'name 'asc
		} table { "name" "name_count" "val_sum" "val_min" "val_max" "val_avg" } 
					{ 
						"a" 3 13.0 1.0 7.0 4.333333333333333
						"b" 2 16.0 6.0 10.0 8.0
					}
	}
}


end