section "base" "base text" {

	group "table" 
	""
	{
		arg "* columns"
		arg "* data"
	}

	{
		equal { table { "a" } { 1 2 } |type? } 'table
		equal { table { 'a } { 1 2 } |type? } 'table
	}

	group "table\\columns" 
	""
	{
		arg "* columns - names of the columns"
		arg "* data - block or list of columns (each column is a block or list)"
	}

	{
		equal { table\columns { "a" } { { 1 2 3 } } |type? } 'table
		equal { table\columns { "a" "b" } { { 1 2 3 } { 4 5 6 } } |length? } 3
		Example:
		table\columns { 'a 'b } { { 1 2 } { "x" "y" } }
	}

	group "table\\rows" 
	""
	{
		arg "* columns - names of the columns"
		arg "* data - block or list of rows (each row is a block or list)"
	}

	{
		equal { table\rows { 'a 'b } { { 1 2 } { 3 4 } } } table { 'a 'b } { 1 2 3 4 }
		equal { table\rows { 'a 'b } list [ list [ 1 2 ] list [ 3 4 ] ] |type? } 'table
	}

	group "to-table" 
	""
	{
		arg "* data"
	}

	{
		equal { to-table list [ dict { "a" 1 } dict { "a" b } ] |type? } 'table
	}

	group "add-row" 
	""
	{
		arg "* sheet"
		arg "* new-row"
	}

	{
		equal {
		table { "a" "b" } { 6 60 7 70 } |add-row { 8 80 } -> 2 -> "b"
		} 80
	}

	group "get-rows" 
	""
	{
		arg "* sheet"
	}

	{
		equal {
		table { "a" "b" } { 6 60 7 70 } |get-rows |type?
		} 'table-row
	}

	group "add-rows" 
	""
	{
		arg "* sheet - the sheet that is getting rows added to it"
		arg "* rows - a block containing one or more rows worth of values, or a TableRow Native value"
	}

	{
		equal {
		ref table { "a" "b" } { 6 60 7 70 } :sheet
		sheet .deref |add-rows [ 3 30 ] |length?
		} 3
		equal {
		ref table { "a" "b" } { 1 80 2 90 } :sheet
		sheet .deref |add-rows { 3 30 } |length?
		} 3
	}

	group "add-rows!" 
	""
	{
		arg "* sheet - the reference to the sheet that is getting rows added to it"
		arg "* rows - a block containing one or more rows worth of values, or a TableRow Native value"
		arg "Tags: #spreasheet #mutation"
	}

	{
		equal {
		ref table { "a" "b"  } { 1 10 2 20 } :sheet
		sheet .add-rows! [ 3 30 ] sheet .deref .length?
		} 3
	}

	group "update-row!" 
	""
	{
		arg "* sheet-ref - A ref to a table"
		arg "* idx - the index of the row to update, 1-based"
		arg "* updater - One of either a function, a dict, or a Table Row"
		arg "Tags: #table #mutation"
	}

	{
		equal {
		spr1: ref table { "a" "b" } { 1 10 2 20 }
		spr1 .update-row! 1 dict [ "a" 111 ]
		spr1 .deref .A1
		} 111
		equal {
		spr1: ref table { "a" "b" } { 1 10 2 20 }
		incrA: fn { row } { row + [ "a" ( "a" <- row ) + 9 ] }
		update-row! spr1 1 ?incrA
		spr1 |deref |A1
		} 10
	}

	group "remove-row!" 
	""
	{
		arg "* sheet-ref"
		arg "* row-idx - Index of row to remove, 1-based"
		arg "Tags: #table #mutation"
	}

	{
		equal {
		spr1: ref table { "a" "b" } { 1 10 2 20 }
		spr1 .remove-row! 1
		spr1 .deref .A1
		} 2
	}

	group "load\\csv" 
	""
	{
		arg "* file-uri - location of csv file to load"
		arg "Tags: #table #loading #csv"
	}

	{
		equal {
		cc os
		f: mktmp + "/test.csv"
		spr1: table { "a" "b" "c" } { 1 1.1 "a" 2 2.2 "b" 3 3.3 "c" }
		spr1 .save\csv f
		spr2: load\csv f |autotype 1.0
		spr1 = spr2
		} true
	}

	group "save\\csv" 
	""
	{
		arg "* sheet    - the sheet to save"
		arg "* file-url - where to save the sheet as a .csv file"
		arg "Tags: #table #saving #csv"
	}

	{
		equal {
		cc os
		f:: mktmp + "/test.csv"
		spr1:: table { "a" "b" "c" } { 1 1.1 "a" 2 2.2 "b" 3 3.3 "c" }
		spr1 .save\csv f
		spr2:: load\csv f |autotype 1.0
		spr1 = spr2
		} true
	}

	group "load\\xlsx" 
	""
	{
		arg "* file-uri - location of xlsx file to load"
		arg "Tags: #table #loading #xlsx"
	}

	{
		equal {
		cc os
		f:: mktmp + "/test.xlsx"
		spr1:: table { "a" "b" "c" } { 1 1.1 "a" 2 2.2 "b" 3 3.3 "c" }
		spr1 .save\xlsx f
		spr2:: load\xlsx f |autotype 1.0
		spr1 = spr2
		} true
	}

	group "save\\xlsx" 
	""
	{
		arg "* table    - the table to save"
		arg "* file-url 		- where to save the table as a .xlsx file"
		arg "Tags: #table #saving #xlsx"
	}

	{
		equal {
		cc os
		f:: mktmp + "/test.xlsx"
		spr1:: table { "a" "b" "c" } { 1 1.1 "a" 2 2.2 "b" 3 3.3 "c" }
		spr1 .save\xlsx f
		spr2:: load\xlsx f |autotype 1.0
		spr1 = spr2
		} true
	}

	group "where-equal" 
	""
	{
		arg "* sheet"
		arg "* column"
		arg "* value"
		arg "Tags: #filter #tables"
	}

	{
		equal { table { 'a } { 1 2 3 2 } |where-equal "a" 2 |length? } 2
	}

	group "where-match" 
	""
	{
		arg "* sheet"
		arg "* column"
		arg "* regexp"
		arg "Tags: #filter #tables"
	}

	{
		equal { table { 'a } { "1" "2" "a3" "2b" } |where-match 'a regexp "^[0-9]$" |length? } 2
		Example: filting for names that start with "En"
		sheet: table { "name" } { "Enno" "Enya" "Enid" "Bob" "Bill" }
		sheet .where-match 'name "En.+"
	}

	group "where-contains" 
	""
	{
		arg "* sheet"
		arg "* column"
		arg "* substring"
		arg "Tags: #filter #tables"
	}

	{
		equal { table { 'a } { "1" "2" "a3" "2b" } |where-contains 'a "2" |length? } 2
		Example: filting for names that contain "nn"
		sheet: table { "name" } { "Enno" "Enya" "Enid" "Bob" "Bill" "Benn" }
		sheet .where-contains 'name "nn"
	}

	group "where-not-contains" 
	""
	{
		arg "* sheet"
		arg "* column"
		arg "* substring"
		arg "Tags: #filter #tables"
	}

	{
		equal { table { 'a } { "1" "2" "a3" "2b" } |where-not-contains 'a "3" |length? } 3
		Example: filting for names that contain "nn"
		sheet: table { "name" } { "Enno" "Enya" "Enid" "Bob" "Bill" "Benn" }
		sheet .where-contains 'name "nn"
	}

	group "where-greater" 
	""
	{
		arg "* sheet"
		arg "* column"
		arg "* value"
		arg "Tags: #filter #table"
	}

	{
		equal { table { 'a } { 1 2 3 2 } |where-greater 'a 1 |length? } 3
		Example: filting for ages over 29
		sheet: table { "name" "age" } { "Enno" 30 "Enya" 25 "Enid" 40 "Bob" 19 "Bill" 45 "Benn" 29 }
		sheet .where-greater 'age 29
	}

	group "col-sum" 
	""
	{
	}

	{
		equal { table { 'a } { 1 2 3 } |col-sum "a" } 6
	}

	group "col-avg" 
	""
	{
	}

	{
		equal { table { 'a } { 1 2 3 } |col-avg 'a } 2.0
	}

	group "B1" 
	""
	{
	}

	{
		equal { table { 'a } { 1 2 3 } |B1 } 2
	}

}

